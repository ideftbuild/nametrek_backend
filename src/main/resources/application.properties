spring.application.name=Nametrek API
# spring.devtools.restart.enabled=false

# Data source config
spring.datasource.url=jdbc:postgresql://${PGHOST}/${PGDATABASE}?sslmode=require
spring.datasource.username=${PGUSER}
spring.datasource.password=${PGPASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# spring.datasource.url=jdbc:postgresql://localhost:5432/nametrek_test
# spring.datasource.username=postgres

# Hibernate dialect and ddl auto
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.redis.host=${REDIS_HOST}
spring.redis.port=${REDIS_PORT}
spring.redis.username=${REDIS_USERNAME}
spring.redis.password=${REDIS_PASSWORD}
# spring.redis.ssl.enabled=true
# Optional debug logs
logging.level.org.springframework.data.redis=DEBUG
logging.level.io.lettuce.core=DEBUG

# Gmail config
spring.mail.host=${MAIL_HOST}
spring.mail.port=${MAIL_PORT}
spring.mail.username=${GMAIL_USERNAME}
spring.mail.password=${GMAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.ssl.enable=true
spring.mail.properties.mail.smtp.starttls.enable=false

# Frontend Config
frontend.url=${FRONTEND_URL}
# OAuth2 configuration
# spring.security.oauth2.client.registration.google.client-id=${GOOGLE_OAUTH_CLIENT_ID}
# spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_OAUTH_CLIENT_SECRET}
# spring.security.oauth2.client.registration.google.scope=https://www.googleapis.com/auth/gmail.send
# spring.security.oauth2.client.registration.google.refresh-token=${GOOGLE_OAUTH_REFRESH_TOKEN}

# SMPT properties
# spring.mail.properties.mail.smtp.auth.mechanisms=XOAUTH2
